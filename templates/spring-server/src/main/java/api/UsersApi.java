/**
 * NOTE: This class is auto generated by the swagger code generator program (2.3.0-SNAPSHOT).
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */
package api;

import model.User;

import io.swagger.annotations.*;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestHeader;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RequestPart;
import org.springframework.web.multipart.MultipartFile;
import java.io.IOException;

import java.util.List;
import java.util.ArrayList;
import java.util.stream.Collectors;
import org.springframework.validation.annotation.Validated;
import javax.validation.constraints.*;
import javax.validation.Valid;
@javax.annotation.Generated(value = "io.swagger.codegen.languages.SpringCodegen", date = "2017-08-30T16:06:40.904Z")

@Api(value = "users", description = "the users API")
public interface UsersApi {
    public static List<User> users = new ArrayList<User>();

    @ApiOperation(value = "Create user", notes = "This operartion creates a new user and return the user identifier.", response = User.class, tags={ "user", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "successful operation", response = User.class),
        @ApiResponse(code = 400, message = "Invalid user parameters supplied") })
    @RequestMapping(value = "/users",
        produces = { "application/json" }, 
        method = RequestMethod.POST)
    default ResponseEntity<User> createUser(@ApiParam(value = "Created user object" ,required=true )  @Valid @RequestBody User user, @RequestHeader(value = "Accept", required = false) String accept) throws Exception {
	users.add(user);
        return new ResponseEntity<User>(user, HttpStatus.OK);
    }


    @ApiOperation(value = "Get user by user name", notes = "", response = User.class, tags={ "user", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "successful operation", response = User.class),
        @ApiResponse(code = 204, message = "User not found"),
        @ApiResponse(code = 400, message = "Invalid user_id supplied") })
    @RequestMapping(value = "/users/{user_id}",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    default ResponseEntity<User> getUserById(@ApiParam(value = "The name that needs to be fetched. Use user1 for testing. ",required=true ) @PathVariable("user_id") String userId, @RequestHeader(value = "Accept", required = false) String accept) throws Exception {
	
	List<User> result = users.stream()                
                .filter(user -> user.getId().equals(Long.valueOf(userId).longValue()))
                .collect(Collectors.toList()); 
	if(result.size() > 0) {
	        return new ResponseEntity<User>(result.get(0), HttpStatus.OK);
	} else {
	        return new ResponseEntity<User>(HttpStatus.OK);	
	}

    }


    @ApiOperation(value = "Get all users", notes = "This operartion query for all users.", response = User.class, responseContainer = "List", tags={ "user", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "successful operation", response = User.class, responseContainer = "List"),
        @ApiResponse(code = 204, message = "Users not found"),
        @ApiResponse(code = 400, message = "Invalid query parameters supplied") })
    @RequestMapping(value = "/users",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    default ResponseEntity<List<User>> getUsers(@ApiParam(value = "Username to filter users") @Valid @RequestParam(value = "username", required = false) String username,@ApiParam(value = "Firstname like to filter users") @Valid @RequestParam(value = "firstName", required = false) String firstName, @RequestHeader(value = "Accept", required = false) String accept) throws Exception {
        return new ResponseEntity<List<User>>(users, HttpStatus.OK);
    }

}
